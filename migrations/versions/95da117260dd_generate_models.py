"""generate Models

Revision ID: 95da117260dd
Revises:
Create Date: 2025-07-15 00:04:23.015003

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "95da117260dd"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "questionnaire_category",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("order_position", sa.Integer(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user",
        sa.Column("phone_number", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("last_login", sa.DateTime(timezone=True), nullable=True),
        sa.Column("subscription_type", sa.String(), nullable=False),
        sa.Column("subscription_expires_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(op.f("ix_user_phone_number"), "user", ["phone_number"], unique=True)
    op.create_table(
        "match",
        sa.Column("user1_id", sa.UUID(), nullable=False),
        sa.Column("user2_id", sa.UUID(), nullable=False),
        sa.Column("compatibility_score", sa.Float(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["user1_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user2_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user1_id", "user2_id", name="unique_match"),
    )
    op.create_table(
        "photo",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("file_path", sa.String(), nullable=False),
        sa.Column("is_primary", sa.Boolean(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "questionnaire",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("religion", sa.String(), nullable=True),
        sa.Column("est_pratiquant", sa.String(), nullable=True),
        sa.Column("partenaire_meme_religion", sa.String(), nullable=True),
        sa.Column("accepte_autre_religion", sa.Boolean(), nullable=True),
        sa.Column("transmission_foi_enfants", sa.Boolean(), nullable=True),
        sa.Column("meme_vision_education_religieuse", sa.Boolean(), nullable=True),
        sa.Column("frequence_sport", sa.String(), nullable=True),
        sa.Column("habitudes_alimentaires", sa.String(), nullable=True),
        sa.Column("approche_hygiene", sa.String(), nullable=True),
        sa.Column("fume", sa.String(), nullable=True),
        sa.Column("boit_alcool", sa.String(), nullable=True),
        sa.Column("sport_partenaire", sa.String(), nullable=True),
        sa.Column("memes_habitudes_alimentaires", sa.Boolean(), nullable=True),
        sa.Column("importance_proprete_partenaire", sa.String(), nullable=True),
        sa.Column("accepte_fumeur", sa.Boolean(), nullable=True),
        sa.Column("accepte_buveur", sa.Boolean(), nullable=True),
        sa.Column("description_physique", sa.Text(), nullable=True),
        sa.Column("style_vestimentaire", sa.String(), nullable=True),
        sa.Column("importance_apparence_soi", sa.String(), nullable=True),
        sa.Column("importance_apparence_partenaire", sa.String(), nullable=True),
        sa.Column("partenaire_ideal_physique", sa.Text(), nullable=True),
        sa.Column("criteres_physiques_non_negotiables", sa.Text(), nullable=True),
        sa.Column("souhaite_enfants", sa.Boolean(), nullable=True),
        sa.Column("partenaire_doit_vouloir_enfants", sa.Boolean(), nullable=True),
        sa.Column("nombre_enfants_souhaite", sa.String(), nullable=True),
        sa.Column("importance_vie_famille", sa.String(), nullable=True),
        sa.Column("relation_famille_origine", sa.Text(), nullable=True),
        sa.Column("importance_relation_belle_famille", sa.String(), nullable=True),
        sa.Column("valeurs_importantes", sa.Text(), nullable=True),
        sa.Column("valeurs_partenaire", sa.Text(), nullable=True),
        sa.Column("vision_roles_foyer", sa.Text(), nullable=True),
        sa.Column("attentes_education_enfants", sa.Text(), nullable=True),
        sa.Column("preference_education_enfants", sa.String(), nullable=True),
        sa.Column("traits_personnalite", sa.Text(), nullable=True),
        sa.Column("defauts_reconnus", sa.Text(), nullable=True),
        sa.Column("personnalite_partenaire_compatible", sa.String(), nullable=True),
        sa.Column("personnalite_partenaire_incompatible", sa.String(), nullable=True),
        sa.Column("langage_amour", sa.String(), nullable=True),
        sa.Column("loisirs_principaux", sa.Text(), nullable=True),
        sa.Column("interets_communs_necessaires", sa.Boolean(), nullable=True),
        sa.Column("interets_importants_partenaire", sa.Text(), nullable=True),
        sa.Column("activites_couple", sa.Text(), nullable=True),
        sa.Column("frequence_sorties", sa.String(), nullable=True),
        sa.Column("type_sorties_preferees", sa.Text(), nullable=True),
        sa.Column("introversion_extraversion", sa.String(), nullable=True),
        sa.Column("tolerance_amis_partenaire", sa.String(), nullable=True),
        sa.Column("style_communication", sa.Text(), nullable=True),
        sa.Column("gestion_conflits", sa.Text(), nullable=True),
        sa.Column("expression_emotions", sa.Text(), nullable=True),
        sa.Column("attentes_communication_partenaire", sa.Text(), nullable=True),
        sa.Column("importance_intimite", sa.String(), nullable=True),
        sa.Column("frequence_intimite_ideale", sa.String(), nullable=True),
        sa.Column("confort_discussion_intimite", sa.String(), nullable=True),
        sa.Column("niveau_affection_publique", sa.String(), nullable=True),
        sa.Column("situation_financiere_actuelle", sa.Text(), nullable=True),
        sa.Column("gestion_finances_couple", sa.Text(), nullable=True),
        sa.Column("importance_situation_financiere_partenaire", sa.String(), nullable=True),
        sa.Column("objectifs_financiers", sa.Text(), nullable=True),
        sa.Column("situation_logement_actuelle", sa.Text(), nullable=True),
        sa.Column("preferences_habitation_future", sa.Text(), nullable=True),
        sa.Column("flexibilite_demenagement", sa.Boolean(), nullable=True),
        sa.Column("preferences_environnement_vie", sa.Text(), nullable=True),
        sa.Column("type_compatibilite_recherchee", sa.String(), nullable=True),
        sa.Column("attentes_relation", sa.Text(), nullable=True),
        sa.Column("rythme_progression_relation", sa.Text(), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "questionnaire_field",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("order_position", sa.Integer(), nullable=False),
        sa.Column("field_type", sa.String(), nullable=False),
        sa.Column("options", sa.Text(), nullable=True),
        sa.Column("required", sa.Boolean(), nullable=False),
        sa.Column("category_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["questionnaire_category.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "refresh_token",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("token", sa.String(), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("is_revoked", sa.Boolean(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_refresh_token_token"), "refresh_token", ["token"], unique=True)
    op.create_table(
        "user_profile",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("prenom", sa.String(), nullable=False),
        sa.Column("genre", sa.String(), nullable=False),
        sa.Column("age", sa.Integer(), nullable=False),
        sa.Column("ville", sa.String(), nullable=False),
        sa.Column("nationalite", sa.String(), nullable=False),
        sa.Column("langues", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("situation_professionnelle", sa.String(), nullable=False),
        sa.Column("niveau_etudes", sa.String(), nullable=False),
        sa.Column("deja_marie", sa.Boolean(), nullable=False),
        sa.Column("a_des_enfants", sa.Boolean(), nullable=False),
        sa.Column("nombre_enfants", sa.Integer(), nullable=True),
        sa.Column("type_relation_recherchee", sa.String(), nullable=False),
        sa.Column("genre_recherche", sa.String(), nullable=False),
        sa.Column("photos", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("is_profile_complete", sa.Boolean(), nullable=False),
        sa.Column("profile_completion_step", sa.Integer(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "user_questionnaire",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("religion", sa.String(), nullable=True),
        sa.Column("est_pratiquant", sa.String(), nullable=True),
        sa.Column("partenaire_meme_religion", sa.String(), nullable=True),
        sa.Column("accepte_autre_religion", sa.Boolean(), nullable=True),
        sa.Column("transmission_foi_enfants", sa.Boolean(), nullable=True),
        sa.Column("meme_vision_education_religieuse", sa.Boolean(), nullable=True),
        sa.Column("frequence_sport", sa.String(), nullable=True),
        sa.Column("habitudes_alimentaires", sa.String(), nullable=True),
        sa.Column("approche_hygiene", sa.String(), nullable=True),
        sa.Column("fume", sa.String(), nullable=True),
        sa.Column("boit_alcool", sa.String(), nullable=True),
        sa.Column("sport_partenaire", sa.String(), nullable=True),
        sa.Column("memes_habitudes_alimentaires", sa.Boolean(), nullable=True),
        sa.Column("importance_proprete_partenaire", sa.String(), nullable=True),
        sa.Column("accepte_fumeur", sa.Boolean(), nullable=True),
        sa.Column("accepte_buveur", sa.Boolean(), nullable=True),
        sa.Column("description_physique", sa.Text(), nullable=True),
        sa.Column("style_vestimentaire", sa.String(), nullable=True),
        sa.Column("importance_apparence_soi", sa.String(), nullable=True),
        sa.Column("importance_apparence_partenaire", sa.String(), nullable=True),
        sa.Column("partenaire_ideal_physique", sa.Text(), nullable=True),
        sa.Column("criteres_physiques_non_negotiables", sa.Text(), nullable=True),
        sa.Column("souhaite_enfants", sa.Boolean(), nullable=True),
        sa.Column("partenaire_doit_vouloir_enfants", sa.Boolean(), nullable=True),
        sa.Column("nombre_enfants_souhaite", sa.Integer(), nullable=True),
        sa.Column("approche_educative", sa.Text(), nullable=True),
        sa.Column("accepte_partenaire_avec_enfants", sa.Boolean(), nullable=True),
        sa.Column("memes_valeurs_educatives", sa.Boolean(), nullable=True),
        sa.Column("importance_situation_financiere", sa.String(), nullable=True),
        sa.Column("niveau_etudes_partenaire", sa.String(), nullable=True),
        sa.Column("approche_argent_couple", sa.Text(), nullable=True),
        sa.Column("personalite", sa.String(), nullable=True),
        sa.Column("preference_personalite_partenaire", sa.String(), nullable=True),
        sa.Column("langage_amour", sa.String(), nullable=True),
        sa.Column("meme_langage_amour", sa.Boolean(), nullable=True),
        sa.Column("frequence_voir_amis", sa.String(), nullable=True),
        sa.Column("tolerance_mode_vie_social", sa.String(), nullable=True),
        sa.Column("gestion_conflits", sa.Text(), nullable=True),
        sa.Column("importance_sexualite", sa.String(), nullable=True),
        sa.Column("frequence_ideale_rapports", sa.String(), nullable=True),
        sa.Column("confort_parler_sexualite", sa.String(), nullable=True),
        sa.Column("valeurs_sexuelles_proches", sa.Boolean(), nullable=True),
        sa.Column("demonstrations_publiques_affection", sa.String(), nullable=True),
        sa.Column("vision_sexualite_couple", sa.Text(), nullable=True),
        sa.Column("orientation_politique", sa.Text(), nullable=True),
        sa.Column("importance_convictions_partenaire", sa.Text(), nullable=True),
        sa.Column("a_animal", sa.Boolean(), nullable=True),
        sa.Column("type_animal", sa.String(), nullable=True),
        sa.Column("accepte_partenaire_avec_animal", sa.Boolean(), nullable=True),
        sa.Column("allergies_animaux", sa.Boolean(), nullable=True),
        sa.Column("allergies_quels_animaux", sa.String(), nullable=True),
        sa.Column("recherche_type", sa.String(), nullable=True),
        sa.Column("vie_couple_ideale", sa.Text(), nullable=True),
        sa.Column("ce_qui_fait_craquer", sa.Text(), nullable=True),
        sa.Column("defaut_intolerable", sa.Text(), nullable=True),
        sa.Column("plus_grande_qualite", sa.Text(), nullable=True),
        sa.Column("plus_grand_defaut", sa.Text(), nullable=True),
        sa.Column("partenaire_ideal_personnalite", sa.Text(), nullable=True),
        sa.Column("lecons_relations_passees", sa.Text(), nullable=True),
        sa.Column("vision_10_ans", sa.Text(), nullable=True),
        sa.Column("raison_inscription", sa.Text(), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "journey",
        sa.Column("match_id", sa.UUID(), nullable=False),
        sa.Column("ended_by", sa.UUID(), nullable=True),
        sa.Column("current_step", sa.Integer(), nullable=False),
        sa.Column("step1_completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("step2_completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("step3_completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("step4_completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("step5_completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_completed", sa.Boolean(), nullable=False),
        sa.Column("end_reason", sa.String(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["ended_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["match.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("match_id"),
    )
    op.create_table(
        "meeting_request",
        sa.Column("journey_id", sa.UUID(), nullable=False),
        sa.Column("requested_by", sa.UUID(), nullable=False),
        sa.Column("proposed_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("proposed_location", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("confirmed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["journey_id"],
            ["journey.id"],
        ),
        sa.ForeignKeyConstraint(
            ["requested_by"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "message",
        sa.Column("journey_id", sa.UUID(), nullable=False),
        sa.Column("sender_id", sa.UUID(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("message_type", sa.String(), nullable=False),
        sa.Column("is_read", sa.Boolean(), nullable=False),
        sa.Column("sent_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["journey_id"],
            ["journey.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sender_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "meeting_feedback",
        sa.Column("meeting_request_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("rating", sa.Integer(), nullable=False),
        sa.Column("feedback", sa.Text(), nullable=True),
        sa.Column("wants_to_continue", sa.Boolean(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["meeting_request_id"],
            ["meeting_request.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("meeting_feedback")
    op.drop_table("message")
    op.drop_table("meeting_request")
    op.drop_table("journey")
    op.drop_table("user_questionnaire")
    op.drop_table("user_profile")
    op.drop_index(op.f("ix_refresh_token_token"), table_name="refresh_token")
    op.drop_table("refresh_token")
    op.drop_table("questionnaire_field")
    op.drop_table("questionnaire")
    op.drop_table("photo")
    op.drop_table("match")
    op.drop_index(op.f("ix_user_phone_number"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_table("questionnaire_category")
    # ### end Alembic commands ###
