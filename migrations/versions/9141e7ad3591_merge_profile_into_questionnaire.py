"""merge Profile into Questionnaire

Revision ID: 9141e7ad3591
Revises: e91623dc1b51
Create Date: 2025-07-23 00:01:04.765809

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "9141e7ad3591"
down_revision: Union[str, None] = "e91623dc1b51"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_profile_user_id"), table_name="profile")
    op.drop_table("profile")
    op.add_column("questionnaire", sa.Column("first_name", sa.String(), nullable=True))
    op.add_column("questionnaire", sa.Column("gender", sa.String(), nullable=True))
    op.add_column("questionnaire", sa.Column("relationship_goal", sa.String(), nullable=True))
    op.add_column("questionnaire", sa.Column("age", sa.String(), nullable=True))
    op.add_column("questionnaire", sa.Column("city_of_residence", sa.String(), nullable=True))
    op.add_column(
        "questionnaire", sa.Column("nationality_cultural_origin", sa.String(), nullable=True)
    )
    op.add_column(
        "questionnaire",
        sa.Column("languages_spoken", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    )
    op.add_column("questionnaire", sa.Column("professional_situation", sa.String(), nullable=True))
    op.add_column("questionnaire", sa.Column("education_level", sa.String(), nullable=True))
    op.add_column("questionnaire", sa.Column("previously_married", sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("questionnaire", "previously_married")
    op.drop_column("questionnaire", "education_level")
    op.drop_column("questionnaire", "professional_situation")
    op.drop_column("questionnaire", "languages_spoken")
    op.drop_column("questionnaire", "nationality_cultural_origin")
    op.drop_column("questionnaire", "city_of_residence")
    op.drop_column("questionnaire", "age")
    op.drop_column("questionnaire", "relationship_goal")
    op.drop_column("questionnaire", "gender")
    op.drop_column("questionnaire", "first_name")
    op.create_table(
        "profile",
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("first_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("gender", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("relationship_goal", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("age", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("city_of_residence", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("nationality_cultural_origin", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "languages_spoken",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("professional_situation", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("education_level", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("previously_married", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "photos", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False
        ),
        sa.Column("is_profile_complete", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("profile_completion_step", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("profile_user_id_fkey"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("profile_pkey")),
    )
    op.create_index(op.f("ix_profile_user_id"), "profile", ["user_id"], unique=True)
    # ### end Alembic commands ###
