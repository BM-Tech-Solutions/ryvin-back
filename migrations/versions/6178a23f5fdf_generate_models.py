"""generate Models

Revision ID: 6178a23f5fdf
Revises:
Create Date: 2025-07-15 18:08:19.099841

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "6178a23f5fdf"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "questionnaire_category",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("order_position", sa.Integer(), nullable=False),
        sa.Column("step", sa.Integer(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "user",
        sa.Column("phone_number", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("has_completed_questionnaire", sa.Boolean(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("last_login", sa.DateTime(timezone=True), nullable=True),
        sa.Column("subscription_type", sa.String(), nullable=False),
        sa.Column("subscription_expires_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(op.f("ix_user_phone_number"), "user", ["phone_number"], unique=True)
    op.create_table(
        "match",
        sa.Column("user1_id", sa.UUID(), nullable=False),
        sa.Column("user2_id", sa.UUID(), nullable=False),
        sa.Column("compatibility_score", sa.Float(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["user1_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user2_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user1_id", "user2_id", name="unique_match"),
    )
    op.create_table(
        "photo",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("file_path", sa.String(), nullable=False),
        sa.Column("is_primary", sa.Boolean(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "profile",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("gender", sa.String(), nullable=False),
        sa.Column("relationship_goal", sa.String(), nullable=False),
        sa.Column("age", sa.Integer(), nullable=False),
        sa.Column("city_of_residence", sa.String(), nullable=False),
        sa.Column("nationality_cultural_origin", sa.String(), nullable=False),
        sa.Column("languages_spoken", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("professional_situation", sa.String(), nullable=False),
        sa.Column("education_level", sa.String(), nullable=False),
        sa.Column("previously_married", sa.Boolean(), nullable=False),
        sa.Column("photos", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("is_profile_complete", sa.Boolean(), nullable=False),
        sa.Column("profile_completion_step", sa.Integer(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "questionnaire",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("religion_spirituality", sa.String(), nullable=True),
        sa.Column("religious_practice", sa.String(), nullable=True),
        sa.Column("partner_must_share_religion", sa.String(), nullable=True),
        sa.Column("accept_non_believer", sa.String(), nullable=True),
        sa.Column("faith_transmission_to_children", sa.String(), nullable=True),
        sa.Column("partner_same_religious_education_vision", sa.String(), nullable=True),
        sa.Column("political_orientation", sa.String(), nullable=True),
        sa.Column("partner_share_convictions_importance", sa.String(), nullable=True),
        sa.Column("lessons_from_past_relationships", sa.String(), nullable=True),
        sa.Column("sport_frequency", sa.String(), nullable=True),
        sa.Column("specific_dietary_habits", sa.String(), nullable=True),
        sa.Column("hygiene_tidiness_approach", sa.String(), nullable=True),
        sa.Column("smoker", sa.String(), nullable=True),
        sa.Column("drinks_alcohol", sa.String(), nullable=True),
        sa.Column("partner_sport_frequency", sa.String(), nullable=True),
        sa.Column("partner_same_dietary_habits", sa.String(), nullable=True),
        sa.Column("partner_cleanliness_importance", sa.String(), nullable=True),
        sa.Column("accept_smoker_partner", sa.String(), nullable=True),
        sa.Column("accept_alcohol_consumer_partner", sa.String(), nullable=True),
        sa.Column("has_pet", sa.String(), nullable=True),
        sa.Column("type_of_pet", sa.String(), nullable=True),
        sa.Column("ready_to_live_with_pet", sa.String(), nullable=True),
        sa.Column("allergic_to_animals", sa.String(), nullable=True),
        sa.Column("which_animals_allergic", sa.String(), nullable=True),
        sa.Column("personality_type", sa.String(), nullable=True),
        sa.Column("partner_personality_preference", sa.String(), nullable=True),
        sa.Column("primary_love_language", sa.String(), nullable=True),
        sa.Column("partner_same_love_language", sa.String(), nullable=True),
        sa.Column("friends_visit_frequency", sa.String(), nullable=True),
        sa.Column("tolerance_social_vs_homebody", sa.String(), nullable=True),
        sa.Column("conflict_management", sa.String(), nullable=True),
        sa.Column("greatest_quality_in_relationship", sa.String(), nullable=True),
        sa.Column("greatest_flaw_in_relationship", sa.String(), nullable=True),
        sa.Column("what_attracts_you", sa.String(), nullable=True),
        sa.Column("intolerable_flaw", sa.String(), nullable=True),
        sa.Column("physical_description", sa.String(), nullable=True),
        sa.Column("main_dressing_style", sa.String(), nullable=True),
        sa.Column("importance_of_appearance", sa.String(), nullable=True),
        sa.Column("partner_hygiene_appearance_importance", sa.String(), nullable=True),
        sa.Column("important_physical_aspects_partner", sa.String(), nullable=True),
        sa.Column("importance_of_sexuality", sa.String(), nullable=True),
        sa.Column("ideal_intimate_frequency", sa.String(), nullable=True),
        sa.Column("comfort_level_talking_sexuality", sa.String(), nullable=True),
        sa.Column("partner_sexual_values_alignment", sa.String(), nullable=True),
        sa.Column("comfortable_public_affection", sa.String(), nullable=True),
        sa.Column("ideal_sexuality_vision", sa.String(), nullable=True),
        sa.Column("partner_similarity_preference", sa.String(), nullable=True),
        sa.Column("partner_age_range", sa.String(), nullable=True),
        sa.Column("importance_financial_situation_partner", sa.String(), nullable=True),
        sa.Column("ideal_partner_education_profession", sa.String(), nullable=True),
        sa.Column("money_approach_in_couple", sa.String(), nullable=True),
        sa.Column("ideal_partner_description", sa.String(), nullable=True),
        sa.Column("ideal_couple_life_description", sa.String(), nullable=True),
        sa.Column("has_children", sa.String(), nullable=True),
        sa.Column("number_of_children", sa.String(), nullable=True),
        sa.Column("wants_children", sa.String(), nullable=True),
        sa.Column("partner_must_want_children", sa.String(), nullable=True),
        sa.Column("partner_desired_number_of_children", sa.String(), nullable=True),
        sa.Column("educational_approach", sa.String(), nullable=True),
        sa.Column("accept_partner_with_children", sa.String(), nullable=True),
        sa.Column("share_same_educational_values", sa.String(), nullable=True),
        sa.Column("imagine_yourself_in10_years", sa.String(), nullable=True),
        sa.Column("reason_for_registration", sa.String(), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "questionnaire_field",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("order_position", sa.Integer(), nullable=False),
        sa.Column("field_type", sa.String(), nullable=False),
        sa.Column("field_unit", sa.String(), nullable=True),
        sa.Column("placeholder", sa.String(), nullable=True),
        sa.Column("required", sa.Boolean(), nullable=False),
        sa.Column("allow_custom", sa.Boolean(), nullable=False),
        sa.Column("category_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["questionnaire_category.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "refresh_token",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("token", sa.String(), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("is_revoked", sa.Boolean(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_refresh_token_token"), "refresh_token", ["token"], unique=True)
    op.create_table(
        "journey",
        sa.Column("match_id", sa.UUID(), nullable=False),
        sa.Column("ended_by", sa.UUID(), nullable=True),
        sa.Column("current_step", sa.Integer(), nullable=False),
        sa.Column("step1_completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("step2_completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("step3_completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("step4_completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("step5_completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_completed", sa.Boolean(), nullable=False),
        sa.Column("end_reason", sa.String(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["ended_by"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["match.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("match_id"),
    )
    op.create_table(
        "meeting_request",
        sa.Column("journey_id", sa.UUID(), nullable=False),
        sa.Column("requested_by", sa.UUID(), nullable=False),
        sa.Column("proposed_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("proposed_location", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("confirmed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["journey_id"],
            ["journey.id"],
        ),
        sa.ForeignKeyConstraint(
            ["requested_by"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "message",
        sa.Column("journey_id", sa.UUID(), nullable=False),
        sa.Column("sender_id", sa.UUID(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("message_type", sa.String(), nullable=False),
        sa.Column("is_read", sa.Boolean(), nullable=False),
        sa.Column("sent_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["journey_id"],
            ["journey.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sender_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "meeting_feedback",
        sa.Column("meeting_request_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("rating", sa.Integer(), nullable=False),
        sa.Column("feedback", sa.Text(), nullable=True),
        sa.Column("wants_to_continue", sa.Boolean(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["meeting_request_id"],
            ["meeting_request.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("meeting_feedback")
    op.drop_table("message")
    op.drop_table("meeting_request")
    op.drop_table("journey")
    op.drop_index(op.f("ix_refresh_token_token"), table_name="refresh_token")
    op.drop_table("refresh_token")
    op.drop_table("questionnaire_field")
    op.drop_table("questionnaire")
    op.drop_table("profile")
    op.drop_table("photo")
    op.drop_table("match")
    op.drop_index(op.f("ix_user_phone_number"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_table("questionnaire_category")
    # ### end Alembic commands ###
