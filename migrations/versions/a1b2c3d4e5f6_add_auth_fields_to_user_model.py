"""Initial database setup

Revision ID: a1b2c3d4e5f6
Revises: 
Create Date: 2025-06-15 23:25:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a1b2c3d4e5f6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create user table with auth fields
    op.create_table('user',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('phone_number', sa.String(), nullable=True),
        sa.Column('email', sa.String(), nullable=True),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('is_verified', sa.Boolean(), nullable=False, server_default=sa.text('false')),
        sa.Column('is_active', sa.Boolean(), nullable=False, server_default=sa.text('true')),
        sa.Column('last_login', sa.DateTime(), nullable=True),
        sa.Column('subscription_type', sa.String(), nullable=False, server_default='FREE'),
        sa.Column('subscription_expires_at', sa.DateTime(), nullable=True),
        sa.Column('hashed_password', sa.String(), nullable=True),
        sa.Column('verification_id', sa.String(), nullable=True),
        sa.Column('provider', sa.String(), nullable=True),
        sa.Column('provider_user_id', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_phone_number'), 'user', ['phone_number'], unique=True)
    
    # Create refresh token table
    op.create_table('refresh_token',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('token', sa.String(), nullable=False),
        sa.Column('expires_at', sa.DateTime(), nullable=False),
        sa.Column('is_revoked', sa.Boolean(), nullable=False, server_default=sa.text('false')),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_refresh_token_token'), 'refresh_token', ['token'], unique=True)
    
    # Create user profile table
    op.create_table('user_profile',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('bio', sa.String(), nullable=True),
        sa.Column('profile_picture', sa.String(), nullable=True),
        sa.Column('location', sa.String(), nullable=True),
        sa.Column('date_of_birth', sa.Date(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create user questionnaire table
    op.create_table('user_questionnaire',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('answers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('completed_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create questionnaire table
    op.create_table('questionnaire',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False, unique=True),
        sa.Column('religion', sa.String(), nullable=True),
        sa.Column('est_pratiquant', sa.String(), nullable=True),
        sa.Column('partenaire_meme_religion', sa.String(), nullable=True),
        sa.Column('accepte_autre_religion', sa.Boolean(), nullable=True),
        sa.Column('transmission_foi_enfants', sa.Boolean(), nullable=True),
        sa.Column('meme_vision_education_religieuse', sa.Boolean(), nullable=True),
        sa.Column('frequence_sport', sa.String(), nullable=True),
        sa.Column('habitudes_alimentaires', sa.String(), nullable=True),
        sa.Column('approche_hygiene', sa.String(), nullable=True),
        sa.Column('fume', sa.String(), nullable=True),
        sa.Column('boit_alcool', sa.String(), nullable=True),
        sa.Column('sport_partenaire', sa.String(), nullable=True),
        sa.Column('memes_habitudes_alimentaires', sa.Boolean(), nullable=True),
        sa.Column('importance_proprete_partenaire', sa.String(), nullable=True),
        sa.Column('accepte_fumeur', sa.Boolean(), nullable=True),
        sa.Column('accepte_buveur', sa.Boolean(), nullable=True),
        sa.Column('description_physique', sa.Text(), nullable=True),
        sa.Column('style_vestimentaire', sa.String(), nullable=True),
        sa.Column('importance_apparence_soi', sa.String(), nullable=True),
        sa.Column('importance_apparence_partenaire', sa.String(), nullable=True),
        sa.Column('partenaire_ideal_physique', sa.Text(), nullable=True),
        sa.Column('criteres_physiques_non_negotiables', sa.Text(), nullable=True),
        sa.Column('souhaite_enfants', sa.Boolean(), nullable=True),
        sa.Column('partenaire_doit_vouloir_enfants', sa.Boolean(), nullable=True),
        sa.Column('nombre_enfants_souhaite', sa.String(), nullable=True),
        sa.Column('importance_vie_famille', sa.String(), nullable=True),
        sa.Column('relation_famille_origine', sa.Text(), nullable=True),
        sa.Column('importance_relation_belle_famille', sa.String(), nullable=True),
        sa.Column('valeurs_importantes', sa.Text(), nullable=True),
        sa.Column('valeurs_partenaire', sa.Text(), nullable=True),
        sa.Column('vision_roles_foyer', sa.Text(), nullable=True),
        sa.Column('attentes_education_enfants', sa.Text(), nullable=True),
        sa.Column('preference_education_enfants', sa.String(), nullable=True),
        sa.Column('traits_personnalite', sa.Text(), nullable=True),
        sa.Column('defauts_reconnus', sa.Text(), nullable=True),
        sa.Column('personnalite_partenaire_compatible', sa.String(), nullable=True),
        sa.Column('personnalite_partenaire_incompatible', sa.String(), nullable=True),
        sa.Column('langage_amour', sa.String(), nullable=True),
        sa.Column('loisirs_principaux', sa.Text(), nullable=True),
        sa.Column('interets_communs_necessaires', sa.Boolean(), nullable=True),
        sa.Column('interets_importants_partenaire', sa.Text(), nullable=True),
        sa.Column('activites_couple', sa.Text(), nullable=True),
        sa.Column('frequence_sorties', sa.String(), nullable=True),
        sa.Column('type_sorties_preferees', sa.Text(), nullable=True),
        sa.Column('introversion_extraversion', sa.String(), nullable=True),
        sa.Column('tolerance_amis_partenaire', sa.String(), nullable=True),
        sa.Column('style_communication', sa.Text(), nullable=True),
        sa.Column('gestion_conflits', sa.Text(), nullable=True),
        sa.Column('expression_emotions', sa.Text(), nullable=True),
        sa.Column('attentes_communication_partenaire', sa.Text(), nullable=True),
        sa.Column('importance_intimite', sa.String(), nullable=True),
        sa.Column('frequence_intimite_ideale', sa.String(), nullable=True),
        sa.Column('confort_discussion_intimite', sa.String(), nullable=True),
        sa.Column('niveau_affection_publique', sa.String(), nullable=True),
        sa.Column('situation_financiere_actuelle', sa.Text(), nullable=True),
        sa.Column('gestion_finances_couple', sa.Text(), nullable=True),
        sa.Column('importance_situation_financiere_partenaire', sa.String(), nullable=True),
        sa.Column('objectifs_financiers', sa.Text(), nullable=True),
        sa.Column('situation_logement_actuelle', sa.Text(), nullable=True),
        sa.Column('preferences_habitation_future', sa.Text(), nullable=True),
        sa.Column('flexibilite_demenagement', sa.Boolean(), nullable=True),
        sa.Column('preferences_environnement_vie', sa.Text(), nullable=True),
        sa.Column('type_compatibilite_recherchee', sa.String(), nullable=True),
        sa.Column('attentes_relation', sa.Text(), nullable=True),
        sa.Column('rythme_progression_relation', sa.Text(), nullable=True),
        sa.Column('completed_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create journey table
    op.create_table('journey',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('title', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('status', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create match table
    op.create_table('match',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('user1_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user2_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('status', sa.String(), nullable=False),
        sa.Column('compatibility_score', sa.Float(), nullable=True),
        sa.Column('matched_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user1_id'], ['user.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user2_id'], ['user.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create message table
    op.create_table('message',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('match_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('sender_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('content', sa.String(), nullable=False),
        sa.Column('read_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['match_id'], ['match.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['sender_id'], ['user.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create meeting request table
    op.create_table('meeting_request',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('match_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('requested_by', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('proposed_date', sa.DateTime(), nullable=False),
        sa.Column('location', sa.String(), nullable=True),
        sa.Column('status', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['match_id'], ['match.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['requested_by'], ['user.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create meeting table
    op.create_table('meeting',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('match_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('meeting_request_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('date', sa.DateTime(), nullable=False),
        sa.Column('location', sa.String(), nullable=True),
        sa.Column('status', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['match_id'], ['match.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['meeting_request_id'], ['meeting_request.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create meeting feedback table
    op.create_table('meeting_feedback',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('meeting_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('rating', sa.Integer(), nullable=False),
        sa.Column('comments', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['meeting_id'], ['meeting.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create photos table
    op.create_table('photos',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('file_path', sa.String(), nullable=False),
        sa.Column('is_primary', sa.Boolean(), server_default=sa.text('false'), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('photos')
    op.drop_table('meeting_feedback')
    op.drop_table('meeting')
    op.drop_table('meeting_request')
    op.drop_table('message')
    op.drop_table('match')
    op.drop_table('journey')
    op.drop_table('questionnaire')
    op.drop_table('user_questionnaire')
    op.drop_table('user_profile')
    op.drop_table('refresh_token')
    op.drop_index(op.f('ix_user_phone_number'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###